// Project Eidolon Data Export - Generated by export_to_tinkerpop.nim
// Apache TinkerPop 3.7.0

println "Loading Project Eidolon data into TinkerPop..."

// Clear existing graph
g.V().drop().iterate()
g.E().drop().iterate()

println "Creating vertices..."

// Agent: ThroneOfTheSkeptic
g.addV('throne').property('name', 'ThroneOfTheSkeptic').property('agent', 'The Skeptic').property('domain', 'skeptic').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfTheArchivist
g.addV('throne').property('name', 'ThroneOfTheArchivist').property('agent', 'The Archivist').property('domain', 'archivist').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfTheMathematician
g.addV('throne').property('name', 'ThroneOfTheMathematician').property('agent', 'The Mathematician').property('domain', 'mathematician').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfTheDreamer
g.addV('throne').property('name', 'ThroneOfTheDreamer').property('agent', 'The Dreamer').property('domain', 'dreamer').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfThePhilosopher
g.addV('throne').property('name', 'ThroneOfThePhilosopher').property('agent', 'The Philosopher').property('domain', 'philosopher').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfTheStage_manager
g.addV('throne').property('name', 'ThroneOfTheStage_manager').property('agent', 'The Stage_manager').property('domain', 'stage_manager').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Agent: ThroneOfTheInvestigator
g.addV('throne').property('name', 'ThroneOfTheInvestigator').property('agent', 'The Investigator').property('domain', 'investigator').property('authority_level', 'triggered').property('current_strain', 0.0).property('max_strain', 1.0).property('is_active', true).property('created', '2025-07-21T00:00:55-05:00').property('last_accessed', '2025-07-21T00:00:55-05:00').next()
// Entity: Pythagorean Theorem
g.addV('entity').property('name', 'Pythagorean Theorem').property('entity_type', 'concept_type').property('description', 'a² + b² = c²').property('strain_amplitude', 0.85).property('strain_resistance', 0.3).property('strain_frequency', 5).property('access_count', 5).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: Modus Ponens
g.addV('entity').property('name', 'Modus Ponens').property('entity_type', 'concept_type').property('description', 'If P then Q, P, therefore Q').property('strain_amplitude', 0.92).property('strain_resistance', 0.1).property('strain_frequency', 8).property('access_count', 8).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: Quantum Mechanics Context
g.addV('entity').property('name', 'Quantum Mechanics Context').property('entity_type', 'concept_type').property('description', 'Physics domain context').property('strain_amplitude', 0.45).property('strain_resistance', 0.7).property('strain_frequency', 3).property('access_count', 3).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: Neural Network Architecture
g.addV('entity').property('name', 'Neural Network Architecture').property('entity_type', 'concept_type').property('description', 'AI system design').property('strain_amplitude', 0.23).property('strain_resistance', 0.9).property('strain_frequency', 1).property('access_count', 1).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: Albert Einstein
g.addV('entity').property('name', 'Albert Einstein').property('entity_type', 'person').property('description', 'Theoretical physicist').property('strain_amplitude', 0.78).property('strain_resistance', 0.4).property('strain_frequency', 6).property('access_count', 6).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: MIT
g.addV('entity').property('name', 'MIT').property('entity_type', 'place').property('description', 'Massachusetts Institute of Technology').property('strain_amplitude', 0.65).property('strain_resistance', 0.6).property('strain_frequency', 4).property('access_count', 4).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()
// Entity: Quantum Revolution
g.addV('entity').property('name', 'Quantum Revolution').property('entity_type', 'event').property('description', 'Early 20th century physics').property('strain_amplitude', 0.89).property('strain_resistance', 0.2).property('strain_frequency', 7).property('access_count', 7).property('created', '2025-07-21T00:00:55-05:00').property('modified', '2025-07-21T00:00:55-05:00').next()

println "Creating edges..."
// Authority: mathematician -> mathematical_theorem
g.addE('has_authority').from(g.V().has('id', 'mathematician').next()).to(g.V().has('id', 'mathematical_theorem').next()).property('authority_strength', 0.9).property('strain_amplitude', 0.7200000000000001).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: skeptic -> logical_rule
g.addE('has_authority').from(g.V().has('id', 'skeptic').next()).to(g.V().has('id', 'logical_rule').next()).property('authority_strength', 0.95).property('strain_amplitude', 0.76).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: stage_manager -> context_info
g.addE('has_authority').from(g.V().has('id', 'stage_manager').next()).to(g.V().has('id', 'context_info').next()).property('authority_strength', 0.7).property('strain_amplitude', 0.5599999999999999).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: dreamer -> creative_concept
g.addE('has_authority').from(g.V().has('id', 'dreamer').next()).to(g.V().has('id', 'creative_concept').next()).property('authority_strength', 0.6).property('strain_amplitude', 0.48).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: philosopher -> person
g.addE('has_authority').from(g.V().has('id', 'philosopher').next()).to(g.V().has('id', 'person').next()).property('authority_strength', 0.8).property('strain_amplitude', 0.6400000000000001).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: investigator -> event
g.addE('has_authority').from(g.V().has('id', 'investigator').next()).to(g.V().has('id', 'event').next()).property('authority_strength', 0.85).property('strain_amplitude', 0.68).property('created', '2025-07-21T00:00:55-05:00').next()
// Authority: archivist -> place
g.addE('has_authority').from(g.V().has('id', 'archivist').next()).to(g.V().has('id', 'place').next()).property('authority_strength', 0.75).property('strain_amplitude', 0.6000000000000001).property('created', '2025-07-21T00:00:55-05:00').next()
println "Data loading complete!"
println ""

// Display graph statistics
println "Project Eidolon Graph Statistics:"
println "=================================="
println "Total vertices: " + g.V().count().next()
println "Total edges: " + g.E().count().next()
println "Throne nodes: " + g.V().hasLabel('throne').count().next()
println "Entity nodes: " + g.V().hasLabel('entity').count().next()
println ""

// Display strain analysis
println "Strain Analysis:"
println "==============="
println "High strain entities (>0.8):"
g.V().hasLabel('entity').has('strain_amplitude', gt(0.8)).values('name').next()
println ""

println "Low resistance entities (<0.5):"
g.V().hasLabel('entity').has('strain_resistance', lt(0.5)).values('name').next()
println ""

println "High frequency entities (>5):"
g.V().hasLabel('entity').has('strain_frequency', gt(5)).values('name').next()
println ""

// Display agent authority
println "Agent Authority:"
println "==============="
g.V().hasLabel('throne').values('name').next()
g.V().hasLabel('throne').values('agent').next()
println ""

println "Project Eidolon data ready for visualization!"
println "Use ':exit' to quit the console"
